[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("DynamicProxyGenAssembly2")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("cuid.net.tests")]
namespace Visus.Cuid
{
    [System.Obsolete("Cuid is deprecated and should not be used. Use Cuid2 instead.", DiagnosticId="VISLIB0001")]
    [System.Text.Json.Serialization.JsonConverter(typeof(Visus.Cuid.Serialization.Json.Converters.CuidConverter))]
    [System.Xml.Serialization.XmlRoot("cuid")]
    public readonly struct Cuid : System.IComparable, System.IComparable<Visus.Cuid.Cuid>, System.IEquatable<Visus.Cuid.Cuid>, System.Xml.Serialization.IXmlSerializable
    {
        public static readonly Visus.Cuid.Cuid Empty;
        public Cuid(string c) { }
        public int CompareTo(Visus.Cuid.Cuid other) { }
        public int CompareTo(object? obj) { }
        public bool Equals(Visus.Cuid.Cuid other) { }
        public override bool Equals(object? obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
        public static Visus.Cuid.Cuid NewCuid() { }
        public static Visus.Cuid.Cuid Parse(System.ReadOnlySpan<char> input) { }
        public static Visus.Cuid.Cuid Parse(string input) { }
        public static bool TryParse(System.ReadOnlySpan<char> input, out Visus.Cuid.Cuid result) { }
        public static bool TryParse([System.Diagnostics.CodeAnalysis.NotNullWhen(true)] string? input, out Visus.Cuid.Cuid result) { }
        public static bool operator !=(Visus.Cuid.Cuid left, Visus.Cuid.Cuid right) { }
        public static bool operator <(Visus.Cuid.Cuid left, Visus.Cuid.Cuid right) { }
        public static bool operator <=(Visus.Cuid.Cuid left, Visus.Cuid.Cuid right) { }
        public static bool operator ==(Visus.Cuid.Cuid left, Visus.Cuid.Cuid right) { }
        public static bool operator >(Visus.Cuid.Cuid left, Visus.Cuid.Cuid right) { }
        public static bool operator >=(Visus.Cuid.Cuid left, Visus.Cuid.Cuid right) { }
    }
    public readonly struct Cuid2 : System.IEquatable<Visus.Cuid.Cuid2>
    {
        public Cuid2() { }
        public Cuid2(int maxLength) { }
        public bool Equals(Visus.Cuid.Cuid2 other) { }
        public override bool Equals(object? obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
        public static bool operator !=(Visus.Cuid.Cuid2 left, Visus.Cuid.Cuid2 right) { }
        public static bool operator ==(Visus.Cuid.Cuid2 left, Visus.Cuid.Cuid2 right) { }
    }
}
namespace Visus.Cuid.Serialization.Json.Converters
{
    public class CuidConverter : System.Text.Json.Serialization.JsonConverter<Visus.Cuid.Cuid>
    {
        public CuidConverter() { }
        public override Visus.Cuid.Cuid Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options) { }
        public override void Write(System.Text.Json.Utf8JsonWriter writer, Visus.Cuid.Cuid value, System.Text.Json.JsonSerializerOptions options) { }
    }
}